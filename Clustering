# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering
from sklearn.metrics import silhouette_score

# Generate sample data (you can replace this with your own dataset)
X, _ = make_blobs(n_samples=300, centers=4, cluster_std=0.60, random_state=0)

# Define functions to perform clustering and evaluate performance
def perform_clustering(X, algorithm, **kwargs):
    if algorithm == 'kmeans':
        clustering = KMeans(**kwargs)
    elif algorithm == 'dbscan':
        clustering = DBSCAN(**kwargs)
    elif algorithm == 'hierarchical':
        clustering = AgglomerativeClustering(**kwargs)
    else:
        raise ValueError("Invalid clustering algorithm specified.")
    
    labels = clustering.fit_predict(X)
    return labels

def plot_clusters(X, labels, title):
    plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis')
    plt.title(title)
    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')
    plt.show()

# Example usage:
# 1. Simple KMeans clustering with different number of clusters
for n_clusters in range(2, 6):
    labels = perform_clustering(X, algorithm='kmeans', n_clusters=n_clusters)
    plot_clusters(X, labels, title=f'KMeans Clustering (n_clusters={n_clusters})')

# 2. DBSCAN clustering with different values of eps and min_samples
eps_values = [0.1, 0.5, 1.0, 1.5]
min_samples_values = [5, 10, 15, 20]
for eps in eps_values:
    for min_samples in min_samples_values:
        labels = perform_clustering(X, algorithm='dbscan', eps=eps, min_samples=min_samples)
        plot_clusters(X, labels, title=f'DBSCAN Clustering (eps={eps}, min_samples={min_samples})')

# 3. Hierarchical clustering with different linkage methods and number of clusters
linkage_methods = ['ward', 'complete', 'average', 'single']
for linkage_method in linkage_methods:
    labels = perform_clustering(X, algorithm='hierarchical', linkage=linkage_method, n_clusters=4)
    plot_clusters(X, labels, title=f'Hierarchical Clustering (linkage={linkage_method})')
